// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/backand/ent/cipher"
)

// Cipher is the model entity for the Cipher schema.
type Cipher struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Default holds the value of the "default" field.
	Default []byte `json:"default,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cipher) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case cipher.FieldDefault:
			values[i] = new([]byte)
		case cipher.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Cipher", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cipher fields.
func (c *Cipher) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cipher.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case cipher.FieldDefault:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field default", values[i])
			} else if value != nil {
				c.Default = *value
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Cipher.
// Note that you need to call Cipher.Unwrap() before calling this method if this Cipher
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cipher) Update() *CipherUpdateOne {
	return (&CipherClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Cipher entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cipher) Unwrap() *Cipher {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cipher is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cipher) String() string {
	var builder strings.Builder
	builder.WriteString("Cipher(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", default=")
	builder.WriteString(fmt.Sprintf("%v", c.Default))
	builder.WriteByte(')')
	return builder.String()
}

// Ciphers is a parsable slice of Cipher.
type Ciphers []*Cipher

func (c Ciphers) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
